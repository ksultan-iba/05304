package myCalc;

import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.Stage;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Main extends Application {
    @FXML Button zero;
    @FXML TextField textField;
    @FXML Text label;
    String inputStr="";
    double[] args=new double[2];
    String currInput="";
    int i=0;

    @Override
    public void start(Stage primaryStage) throws Exception{
        Parent root = FXMLLoader.load(getClass().getResource("MyCalc.fxml"));
        primaryStage.setTitle("Calculator");

        primaryStage.setScene(new Scene(root, 300, 400));
        primaryStage.show();
    }

    void storeArgs(){
        if(args[1]==0|args[0]==-1){
                args[i]=-1*Double.parseDouble(currInput);}
        else
            args[i]=Double.parseDouble(currInput);
        i=(i+1)%2;
        currInput="";
    }

    @FXML void numberPressed(Event event) {
        inputStr += ((Button) (event.getSource())).getId();
        currInput += ((Button) (event.getSource())).getId();
        //textField.setText(inputStr);
        textField.setText(currInput);
    }
    @FXML void decimalPressed(Event event) {
        inputStr+=".";
        currInput += ((Button) (event.getSource())).getId();
        //textField.setText(inputStr);
        textField.setText(currInput);
    }
    @FXML void addPressed(Event event) {
        inputStr+="+";
        if(i==1){
            args[i]=Double.parseDouble(currInput);
            inputStr="";
            textField.setText(String.valueOf(operate('a'))); //fix this
        }

        args[i]=Double.parseDouble(currInput);
        i=(i+1)%2;
        currInput="";
        //textField.setText(String.valueOf(operate('a')));
        //textField.setText(inputStr);
    }
    @FXML void subtractPressed(Event event) {
        if (args[0] == 0) args[0] = -1;
        else {
            inputStr += "-";
            storeArgs();
            textField.setText(String.valueOf(operate('s')));
            //textField.setText(inputStr);
        }
    }
    @FXML void multiplyPressed(Event event){
        inputStr += "*";
        storeArgs();
        textField.setText(String.valueOf(operate('m')));
        //textField.setText(inputStr);
        }
    @FXML void dividePressed(Event event) {
        inputStr += "/";
        storeArgs();
        textField.setText(String.valueOf(operate('d')));
        //textField.setText(inputStr);
    }
    @FXML void equalsPressed(Event event) {
        System.out.println(inputStr);
        args[i]=Double.parseDouble(currInput);
        inputStr="";
        textField.setText(String.valueOf(operate('a'))); //fix this
    }
    @FXML void clearPressed(Event event) {
        textField.setText("");
        inputStr="";
        args[0]=0; args[1]=0;
        currInput="";
    }


    public double operate(char x) {
        switch (x) {
            case 'a':
                return args[0] + args[1];
            case 's':
                return args[0] - args[1];
            case 'm':
                return args[0] + args[1];
            case 'd':
                return args[0] / args[1];
        }
        return 0; //fix
    }

    public static void OP(String inputStr){
        List<String> tokens=getTokens(inputStr);
        System.out.println(tokens);
        List<Integer> number=search(tokens,"[0-9.]+");
        List<Integer> plus=search(tokens,"+");
        List<Integer> minus=search(tokens,"-");
        List<Integer> divide=search(tokens,"/");
        List<Integer> multiply=search(tokens,"*");
        System.out.println(number);
        System.out.println(plus);
        System.out.println(minus);
        System.out.println(divide);
        System.out.println(multiply);
    }
    public static List<Integer> search(List lst, String o){
        List<Integer> indFound =new ArrayList<Integer>();
        for(int i=0;i<lst.size();i++){
            if(lst.get(i).equals(o)) indFound.add(i);
        }
        return indFound;
    }


    public static List<String> getTokens(String inputStr){
        String pattern="[0-9.]+|[-+*/]"; //how to deal with - sign
        ArrayList<String> tokens = new ArrayList<String>(); //this list will be populated by the pattern from the text
        Pattern tokSplitter = Pattern.compile(pattern); //tokSplitter is simply the pattern to look for. To treat any word as a pattern, you must use compile.pattern
        Matcher m = tokSplitter.matcher(inputStr); //create a matcher that e.g. finds the pattern called tokSplitter in the text

        while (m.find()) { //as long as the matcher can find tokSplitter in the text
            tokens.add(m.group()); //add the pattern that was found in text "m.group()" to the list tokens
        }

        return tokens;
    }


    public static void main(String[] args) {
        launch(args);
    }
}
